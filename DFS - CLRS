#include <iostream>
#include <list>

using namespace std;

int color[1000] = {0};
int pi[1000] = {0};
int d[1000] = {0};
int f[1000] = {0};
int time = 0;
list<int> tab[7];

void DFS_VISIT(int);

void DFS()                                                       //***Dotyczy grafu na liczbach***
{
    for(int i = 1; i < 7; i++)
    {
        if(color[i] == 0)
        {
            DFS_VISIT(i);
        }
    }
}

void DFS_VISIT(int v)
{
    list<int>::iterator j;

    color[v] = 1;
    time = time + 1;
    d[v] = time;

    for(j = tab[v].begin(); j != tab[v].end(); j++)
    {
        if(color[*j] == 0)
        {
            pi[*j] = v;
            DFS_VISIT(*j);
        }
    }

    color[v] = 2;
    time = time + 1;
    f[v] = time;
}

void Distance_output()
{
//    cout << "time:  " << endl;
//    for(int i = 1; i < 7; i++)
//    {
//        cout << "node " << i << " = " << d[i] << "/" << f[i] << endl;
//    }

    for(int k = 1; k <= time; k++)
       {
           for(int i = 1; i < 1000; i++)
           {
                if(d[i] == k)
                {
                    cout << d[i] << " - " << i << endl;
                }

                else if(f[i] == k)
                {
                cout << f[i] << " - " << i << endl;
                }
           }
        }
}

int main()
{
    tab[1].push_back(2);
    tab[1].push_back(4);
    tab[5].push_back(4);
    tab[4].push_back(2);
    tab[2].push_back(5);
    tab[3].push_back(5);
    tab[3].push_back(6);
    tab[6].push_back(6);

    DFS();
    Distance_output();

    return 0;
}

