#include <iostream>
#include <list>

using namespace std;
///////////////////////////////////////DECLARATIONS//////////////////////////////////////////////////
void DFS_VISIT(int v, list<int> tab[], int n, int color[], int pi[], int d[], int f[], int time);
void DFS_VISIT_SCC(int v, list<int> tab[], int n, int color[], int pi[], int d[], int f[], int time);
/////////////////////////////////////////////////////////////////////////////////////////////////////
list<int> lista;
list<int> SCC_lista;
/////////////////////////////////////////////////////////////////////////////////////////////////////
void DFS(list<int> tab[], int n, int color[], int pi[], int d[], int f[], int time)
{

    for(int i = 1; i < n; i++)
    {
        if(color[i] == 0)
        {
            DFS_VISIT(i, tab, n, color, pi, d, f, time);
        }
    }
}

void DFS_VISIT(int v, list<int> tab[], int n, int color[], int pi[], int d[], int f[], int time)
{
    list<int>::iterator j;

    color[v] = 1;
    time = time + 1;
    d[v] = time;

    for(j = tab[v].begin(); j != tab[v].end(); j++)
    {
        if(color[*j] == 0)
        {
            pi[*j] = v;
            DFS_VISIT(*j, tab, n, color, pi, d, f, time);
        }
    }

    lista.push_front(v);
    color[v] = 2;
    time = time + 1;
    f[v] = time;
}

void SCC(list<int> tab2[], int n, int color2[], int pi2[], int d2[], int f2[], int time2)
{
    list<int>::iterator it;
    list<int>::iterator it2;

    for(it = lista.begin(); it != lista.end(); it++)
    {
        if(color2[*it] == 0)
        {
            DFS_VISIT_SCC(*it, tab2, n, color2, pi2, d2, f2, time2);
            for(it2 = SCC_lista.begin(); it2 != SCC_lista.end(); it2++)
            {
                cout << *it2 << " ";
            }
            SCC_lista.clear();
            cout << endl;
        }
    }
}

void DFS_VISIT_SCC(int v, list<int> tab2[], int n, int color2[], int pi2[], int d2[], int f2[], int time2)
{
    list<int>::iterator j;

    color2[v] = 1;
    time2 = time2 + 1;
    d2[v] = time2;

    for(j = tab2[v].begin(); j != tab2[v].end(); j++)
    {
        if(color2[*j] == 0)
        {
            pi2[*j] = v;
            DFS_VISIT_SCC(*j, tab2, n, color2, pi2, d2, f2, time2);
        }
    }

    SCC_lista.push_front(v);
    color2[v] = 2;
    time2 = time2 + 1;
    f2[v] = time2;
}
/////////////////////////////////////////////MAIN////////////////////////////////////////////////////
int main()
{
    int n, m, v1, v2;
    cin >> n;
    cin >> m;
    n+=1;
    m+=1;
    //////////////////////
    list<int> tab[n];
    list<int> tab2[n];
    int color[n] = {0};
    int pi[n] = {0};
    int d[n] = {0};
    int f[n] = {0};
    int time = 0;
    //////////////////////
    int color2[n] = {0};
    int pi2[n] = {0};
    int d2[n] = {0};
    int f2[n] = {0};
    int time2 = 0;

    for(int i = 1; i < m; i++)
    {
        cin >> v1 >> v2;
        tab[v1].push_back(v2);
        tab2[v2].push_back(v1);
    }

    cout << endl << endl;
    DFS(tab, n, color, pi, d, f, time);
    SCC(tab2, n, color2, pi2, d2, f2, time2);

//    list<int>::iterator it;
//    for(it = lista.begin(); it != lista.end(); it++)
//    {
//        cout << *it << " ";
//    }

//    list<int>::iterator j;
//
//    for(j = SCC_lista.begin(); j != SCC_lista.end(); j++)
//    {
//        cout << *j << " ";
//    }

    return 0;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////
