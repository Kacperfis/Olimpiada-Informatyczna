#include <iostream>
#include <list>
#include <vector>
#include <algorithm>
#include <set>

using namespace std;

void DFS_VISIT(int v, list<int> tab[], int n, int color[], int d[], int f[], int pi[], int low[], int time);
void LOW(int v, list<int> tab[], int n, int color[], int d[], int f[], int pi[], int low[], int time);

void DFS(list<int> tab[], int n, int color[], int d[], int f[], int pi[], int low[], int time)
{
    for(int i = 1; i < n; i++)
    {
        if(color[i] == 0)
        {
            DFS_VISIT(i, tab, n, color, d, f, pi, low, time);
        }
    }
}

void DFS_VISIT(int v, list<int> tab[], int n, int color[], int d[], int f[], int pi[], int low[], int time)
{
    list<int>::iterator it;

    color[v] = 1;
    time = time + 1;
    d[v] = time;

    for(it = tab[v].begin(); it != tab[v].end(); it++)
    {
        if(color[*it] == 0)
        {
            pi[*it] = v;
            DFS_VISIT(*it, tab, n, color, d, f, pi, low, time);
        }
    }

    color[v] = 2;
    time = time + 1;
    f[v] = time;
    LOW(v, tab, n, color, d, f, pi, low, time);
}

void LOW(int v, list<int> tab[], int n, int color[], int d[], int f[], int pi[], int low[], int time)
{
    list<int>::iterator it;
    vector<int>::iterator it2;
    vector<int> V;
    vector<int> low2;
    vector<int> low3;
    vector<int> parents;

    V.push_back(d[v]);

    for(it = tab[v].begin(); it != tab[v].end(); it++)
    {
        if(*it != pi[v])
            low3.push_back(d[*it]);
    }

    if(low3.size() != 0)
    {
        sort(low3.begin(), low3.end());
        V.push_back(*low3.begin());
    }

    for(int i = 1; i < n; i++)
    {
        if(pi[i] == v)
            parents.push_back(i);
    }

    for(it2 = parents.begin(); it2 != parents.end(); it2++)
    {
        if(low[*it2] != 0)
            low2.push_back(low[*it2]);
    }

    if(low2.size() != 0)
    {
        sort(low2.begin(), low2.end());
        V.push_back(*low2.begin());
    }

    sort(V.begin(), V.end());
    low[v] = *V.begin();

    V.clear();
    low2.clear();
    low3.clear();
    parents.clear();
}

int main()
{
    int n, m, v1, v2;
    cin >> n >> m;

    n+=1;
    m+=1;

    list<int> *tab = new list<int>[n];

    for(int i = 1; i < m; i++)
    {
        cin >> v1 >> v2;
        tab[v1].push_back(v2);
        tab[v2].push_back(v1);
    }

    int *color = new int[n];
    int *d = new int[n];
    int *f = new int[n];
    int *pi = new int[n];
    int *low = new int[n];
    int time = 0;

    for(int i = 1; i < n; i++)
    {
        color[i] = 0;
        d[i] = 0;
        f[i] = 0;
        pi[i] = 0;
        low[i] = 0;
    }

    DFS(tab, n, color, d, f, pi, low, time);
  
    set<int> Points;
    list<int>::iterator it;
    set<int>::iterator it2;

    for(int i = 2; i < n; i++)
    {
        for(it = tab[i].begin(); it != tab[i].end(); it++)
        {
            if(pi[*it] == i)
            {
                if(low[*it] >= d[i])
                    Points.insert(i);
            }
        }
    }

    int licznik = 0;
    for(int i = 1; i < n; i++)
    {
        if(pi[i] == 1)
            licznik++;
    }

    if(licznik > 1)
        Points.insert(1);

    for(it2 = Points.begin(); it2 != Points.end(); it2++)
    {
        cout << *it2 << " ";
    }

    delete [] color;
    delete [] d;
    delete [] f;
    delete [] pi;
    delete [] low; 
    delete [] tab;
 
    return 0;
}
