/*																													   
 Templatka c++ Kacper Fis																							   																											   //
*/																													  
																													   
#include <iostream>       	
#include <cstdio>         
#include <limits>		  
#include <cstdlib>       
#include <utility>        
#include <iterator>       
#include <bitset>         
#include <list>           
#include <vector>         
#include <map>
#include <unordered_map>            
#include <set>            														   
#include <queue>          																							   
#include <deque>          																							   
#include <stack>																									   
#include <algorithm>																								   
#include <cmath>																									   
#include <string>      																								   
#include <time.h>																									   
#include <iomanip> 																									   
#include <sstream>																									   
#include <bits/stdc++.h>																							   
																													   
using namespace std; 																								   
																													   
const int INF = 1000000001;																						   
const float PI = 3.14;																								   
typedef long long LL;																								   
																													   
typedef vector<int> vi;																								   
typedef list<int> li;																								   
typedef queue<int> qi; 																								   
typedef pair<int,int> ii; 																							   
typedef map<string,int> msi; //np msi['nazwa'] = 'liczba'															   
typedef vector<ii> vii; //vector par<int>, do tworzenia tablicy dla grafów wagowych #dijkstra #Bellman_Ford			   
typedef priority_queue< ii, vector<ii>, greater<ii> > pq; //kolejka priorytetowa vectorów par(top()=min) #dijkstra	   
																													   
list<int>::iterator it;																								   
list<int>::iterator it1;																							   
vector<int>::iterator it2;																							   
vector<int>::iterator it3;																							   
set<int>::iterator it4;																								   
map<string, int>::iterator it5; 																					   
vector<ii>::iterator iter;																							   
																													   																				   
#define print_list(x) for(it = (x).begin(); it != (x).end(); it++) {cout << *it << " ";}							   
#define print_vector(x) for(it2 = (x).begin(); it2 != (x).end(); it2++) {cout << *it2 << " ";}						   
#define search_list(x) for(it = (x).begin(); it != (x).end(); it++)													   
#define search_vector(x) for(it2 = (x).begin(); it2 != (x).end(); it2++);											   
#define pb(x) push_back(x) 																							   
#define pf(x) push_front(x)																							   
#define mp(x, y) make_pair(x, y)                                                                                       
///////////////////////////////////////////////GLOBAL DEFINITIONS////////////////////////////////////////////////////////



///////////////////////////////////////////////////FUNCTIONS/////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////MAIN////////////////////////////////////////////////////////////////
int main(int argc, char* argv[])																					 
{ios_base::sync_with_stdio(false); cin.tie(NULL);                  												       
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    int n;
    cin >> n;
    char s[n];
    
    int prime = 31; //liczba pierwsza do haszowania
    int h[1000]; //tablica haszujaca
    int p[1000]; //potegi x[i]
    
    //wczytujemy tekst s, o dlugosci n
    for(int i = 0; i < n; i++)
    {
		cin >> s[i];
	}
	
	p[0] = 1;
	for(int i = 1;i <= n; i++)
	{
		p[i] = p[i-1] * prime;
	}
	
	h[0] = 0;
	for(int i = 1; i <= n; i++)
	{
		h[i] = h[i - 1] + (p[i] * s[i]);
		//opis dla s = "kacper": h[ka] = h[k] + h[a], h[kac] = h[ka] + h[c], h[kacp] = h[kac] + h[p] itd...
	}
	//podslowa slowa "kacper": k, ka, kac, kacp, kacpe, kacper -> dla kazdego z nich zostaje wyznaczony
	//hasz, dzieki czemu mozemy je latwo porownywac, porownujac ich hasze w czasie stalym O(1).
	
    cout << "tablica haszy podsłów: " << endl;
    for(int i = 1; i < n; i++)
    {
		cout << h[i] << endl;
	}
 
	
 
	
	
	
	return 0;
}
