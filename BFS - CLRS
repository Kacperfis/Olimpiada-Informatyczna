DLA GRAFÃ“W NUMEROWANYCH OD 0:


#include <iostream>
#include <list>
#include <queue>

using namespace std;

void BFS(list<int> tab[], int s)
{
    int color[8] = {0};
    int d[8] = {0};
    int pi[8] = {0};
    queue<int> Q;
    list<int>::iterator j;
    int u;

       color[s] = 1;
       d[s] = 0;
       pi[s] = 0;

       Q.push(s);

       while(!Q.empty())
       {
           u = Q.front();
           Q.pop();
           for(j = tab[u].begin(); j != tab[u].end(); j++)
           {
               if(color[*j] == 0)
               {
                   color[*j] = 1;
                   d[*j] = d[u] + 1;
                   pi[*j] = u;
                   Q.push(*j);

               }
           }
           color[u] = 2;
       }

   cout << "wierz     " << "pi[]     " << "d[]     " << "color[]" << endl;
   for(int i = 0; i < 8; i++)
   {
       cout << i << ":          " << pi[i] << "       " << d[i] << "        " << color[i] << endl;
   }

}


int main()
{
    list<int> tab[8];

    tab[0].push_back(1);
    tab[0].push_back(4);
    tab[0].push_back(5);
    tab[4].push_back(0);
    tab[4].push_back(5);
    tab[1].push_back(0);
    tab[1].push_back(5);
    tab[1].push_back(6);
    tab[5].push_back(4);
    tab[5].push_back(0);
    tab[5].push_back(1);
    tab[5].push_back(6);
    tab[6].push_back(1);
    tab[6].push_back(5);
    tab[6].push_back(2);
    tab[2].push_back(6);
    tab[2].push_back(3);
    tab[3].push_back(2);
    tab[3].push_back(7);
    tab[7].push_back(3);

    BFS(tab, 0);

    return 0;
}
