/*																													   //
 Templatka c++ Kacper Fis																							   //																												   //
*/																													   //
																													   //
#include <iostream>       															 								   //	
#include <cstdio>           																						   //
#include <limits>		 							   																   //
#include <cstdlib>       																							   //
#include <utility>       																							   //
#include <iterator>       	 																						   //
#include <bitset>         																							   //
#include <list>           																							   //
#include <vector>         								  															   //
#include <map>           	  																						   //
#include <set>            																							   //
#include <queue>          																							   //
#include <deque>          																							   //
#include <stack>																									   //
#include <algorithm>																								   //
#include <cmath>																									   //
#include <string>      																								   //
#include <time.h>																									   //
#include <iomanip> 																									   //
#include <sstream>																									   //
#include <bits/stdc++.h>																							   //
																													   //
using namespace std; 																								   //
																													   //
const int INF =  1000000001;																						   //
const float PI = 3.14;																								   //
typedef long long LL;																								   //
																													   //
typedef vector<int> vi;																								   //
typedef list<int> li;																								   //
typedef queue<int> qi; 																								   //
typedef pair<int,int> ii; 																							   //
typedef map<string,int> msi; //np msi['nazwa'] = 'liczba'															   //
typedef vector<ii> vii; //vector par<int>, do tworzenia tablicy dla grafów wagowych #dijkstra #Bellman_Ford			   //
typedef priority_queue< ii, vector<ii>, greater<ii> > pq; //kolejka priorytetowa vectorów par(top()=min) #dijkstra	   //
																													   //
list<int>::iterator it;																								   //
list<int>::iterator it1;																							   //
vector<int>::iterator it2;																							   //
vector<int>::iterator it3;																							   //
set<int>::iterator it4;																								   //
map<string, int>::iterator it5; 																					   //
vector<ii>::iterator iter;																							   //
																													   //																				   //
#define print_list(x) for(it = (x).begin(); it != (x).end(); it++) {cout << *it << " ";}							   //
#define print_vector(x) for(it2 = (x).begin(); it2 != (x).end(); it2++) {cout << *it2 << " ";}						   //
#define search_list(x) for(it = (x).begin(); it != (x).end(); it++)													   //
#define search_vector(x) for(it2 = (x).begin(); it2 != (x).end(); it2++);											   //
#define pb(x) push_back(x) 																							   //
#define pf(x) push_front(x)																							   //
#define mp(x, y) make_pair(x, y)                                                                                       //
///////////////////////////////////////////////GLOBAL DEFINITIONS////////////////////////////////////////////////////////
int n;
vii tab[10005];
vii tab2[10005];
int d[10005];
int d2[10005];
bool QS[10005];
bool QS2[10005];

///////////////////////////////////////////////////FUNCTIONS/////////////////////////////////////////////////////////////

void Dijkstra(int root, vii *tab, int *d, bool *QS)
{
	int v, u, wt;
	pq Q;
	d[root] = 0;
	Q.push(mp(0, root));
	
	for(int i = 0; i < n; i++)
	{
		u = Q.top().second;
		Q.pop();
		QS[u] = true;
		
		for(iter = tab[u].begin(); iter != tab[u].end(); iter++)
		{
			v = iter->first;
			wt = iter->second;
				
			if(!QS[v] && d[v] > d[u] + wt)
			{
				d[v] = d[u] + wt;
				Q.push(mp(d[v], v));
			}
		}		
	}
}

/////////////////////////////////////////////////////MAIN////////////////////////////////////////////////////////////////
int main(int argc, char* argv[])																					   //
{ios_base::sync_with_stdio(false); cin.tie(NULL);                  												       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
	int t;
	cin >> t;
	
	for(int l = 0; l < t; l++)
	{
		int m, s, k, p, v1, v2, v3;
		
		for(int i = 0; i < 10005; i++)
		{
			d[i] = INF;
			d2[i] = INF;
			QS[i] = false;
			QS2[i] = false;
		}
		
		cin >> n >> m >> k >> s >> p;
		
		for(int i = 1; i <= m; i++)
		{
			cin >> v1 >> v2 >> v3;
			tab[v1].pb(mp(v2, v3));
			tab2[v2].pb(mp(v1, v3));
		}
		
		Dijkstra(s, tab, d, QS);
		Dijkstra(p, tab2, d2, QS2);
		int ans = d[p];
		for(int i = 0; i < k; i++)
		{
			cin >> v1 >> v2 >> v3;
			
			ans = min(ans, min(d[v1] + v3 + d2[v2], d[v2] + v3 + d2[v1]));
		}
		
		if(ans == INF)
			ans = -1;
		cout << ans << endl;
	}
	
	return 0;
}
