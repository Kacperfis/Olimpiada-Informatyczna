ZNAJDOWANIE CYKLU EULERA W GRAFIE EULEROWSKIM - KACPER FIS
#include <iostream>
#include <list>
#include <vector>
#include <algorithm>

using namespace std;

void DFS_VISIT(int v, list<int>tab[], int n, int color[], int d[], int f[], int pi[], int low[], int time);
void LOW(int v, list<int>tab[], int n, int color[], int d[], int f[], int pi[], int low[], int time);

void DFS(list<int>tab[], int n, int color[], int d[], int f[], int pi[], int low[], int time)
{
    for(int i = 1; i < n; i++)
    {
        if(color[i] == 0)
        {
            DFS_VISIT(i, tab, n, color, d, f, pi, low, time);
        }
    }
}

void DFS_VISIT(int v, list<int>tab[], int n, int color[], int d[], int f[], int pi[], int low[], int time)
{
    list<int>::iterator it;

    color[v] = 1;
    time = time + 1;
    d[v] = time;

    for(it = tab[v].begin(); it != tab[v].end(); it++)
    {
        if(color[*it] == 0)
        {
            pi[*it] = v;
            DFS_VISIT(*it, tab, n, color, d, f, pi, low, time);
        }
    }

    color[v] = 2;
    time = time + 1;
    f[v] = time;
    LOW(v, tab, n, color, d, f, pi, low, time);
}
void LOW(int v, list<int>tab[], int n, int color[], int d[], int f[], int pi[], int low[], int time)
{
    vector<int> V;
    vector<int> low2;
    vector<int> low3;
    vector<int> Parents;
    vector<int>::iterator it2;
    list<int>::iterator it;

    V.push_back(d[v]);

    for(it = tab[v].begin(); it != tab[v].end(); it++)
    {
        if(*it != pi[v])
            low3.push_back(d[*it]);
    }

    if(low3.size() != 0)
    {
        sort(low3.begin(), low3.end());
        V.push_back(*low3.begin());
    }

    for(int i = 1; i < n; i++)
    {
        if(pi[i] == v)
            Parents.push_back(i);
    }

    for(it2 = Parents.begin(); it2 != Parents.end(); it2++)
    {
        if(low[*it2] != 0)
        {
            low2.push_back(low[*it2]);
        }
    }

    if(low2.size() != 0)
    {
        sort(low2.begin(), low2.end());
        V.push_back(*low2.begin());
    }

    sort(V.begin(), V.end());
    low[v] = *V.begin();

    V.clear();
    low2.clear();
    low3.clear();
    Parents.clear();
}

bool IS_BRIDGE(list<int> tab[], int n, int licznik, int wsk)
{
    int *color = new int[n];
    int *d = new int[n];
    int *f = new int[n];
    int *pi = new int[n];
    int *low = new int[n];
    int time = 0;

    for(int i = 1; i < n; i++)
    {
        color[i] = 0;
        d[i] = 0;
        f[i] = 0;
        pi[i]= 0;
        low[i] = 0;
    }

    DFS(tab, n, color, d, f, pi, low, time);

    bool check_1 = false;
    bool check_2 = false;

    vector<int> bridge_first;
    vector<int> bridge_second;
    vector<int>::iterator it2;

    for(int i = 2; i < n; i++)
    {
        if(low[i] == d[i])
        {
            if((pi[i] && i) > 0)
            {
                bridge_first.push_back(i);
                bridge_second.push_back(pi[i]);
            }
        }
    }

    for(it2 = bridge_first.begin(); it2 != bridge_first.end(); it2++)
    {
        if(*it2 == licznik)
        {
            check_1 = true;
            break;
        }
        else continue;
    }

    for(it2 = bridge_second.begin(); it2 != bridge_second.end(); it2++)
    {
        if(*it2 == wsk)
        {
            check_2 = true;
            break;
        }
        else continue;
    }

    if((check_1 == true) && (check_2 == true))
        return true;
    else return false;

    delete [] color;
    delete [] d;
    delete [] f;
    delete [] pi;
    delete [] low;
    delete [] tab;
}

int main()
{
    int n, m, v1, v2;

    cin >> n >> m;

    n+=1;
    m+=1;

    list<int> *tab = new list<int>[n];

    for(int i = 1 ; i < m; i++)
    {
        cin >> v1 >> v2;
        tab[v1].push_back(v2);
        tab[v2].push_back(v1);
    }

    int licznik = 1;
    bool confirm = false;

    while(confirm == false)
    {
        if(tab[licznik].size() != 0)
        {
            confirm = true;
            break;
        }
        else if(tab[licznik].size() == 0)
        {
            licznik++;
        }
    }

    ////////////////////////////////////////////////////////////

    int licznik_first = licznik;
    vector<int>::iterator it2;
    list<int>::iterator it;
    list<int>::iterator j;
    list<int> Vertices;

    while(Vertices.size() != (m-1))
    {
        for(it = tab[licznik].begin(); it != tab[licznik].end(); it++)
        {
            if(IS_BRIDGE(tab, n, licznik, *it) == 0)
            {
                Vertices.push_front(licznik);
                tab[licznik].remove(*it);
                tab[*it].remove(licznik);
                licznik = *it;
                break;
            }
            else if((IS_BRIDGE(tab, n, licznik, *it) == 1) && (tab[licznik].size() == 1))
            {
                Vertices.push_front(licznik);
                tab[licznik].remove(*it);
                tab[*it].remove(licznik);
                licznik = *it;
                break;
            }
            else if((IS_BRIDGE(tab, n, licznik, *it) == 1) && (tab[licznik].size() > 1))
            {
                continue;
            }
        }
    }

    Vertices.push_front(licznik_first);

    /////////////////////////////////////////////////////////////////

    cout << endl << "Eulerian Cycle: ";
    for(it = Vertices.begin(); it != Vertices.end(); it++)
    {
        cout << *it << " ";
    }

    return 0;
}






















#include <iostream>
#include <list>
#include <vector>
#include <algorithm>

using namespace std;

void DFS_VISIT(int v, list<int>tab[], int n, int color[], int d[], int f[], int pi[], int low[], int time);
void LOW(int v, list<int>tab[], int n, int color[], int d[], int f[], int pi[], int low[], int time);

void DFS(list<int>tab[], int n, int color[], int d[], int f[], int pi[], int low[], int time)
{
    for(int i = 1; i < n; i++)
    {
        if(color[i] == 0)
        {
            DFS_VISIT(i, tab, n, color, d, f, pi, low, time);
        }
    }
}

void DFS_VISIT(int v, list<int>tab[], int n, int color[], int d[], int f[], int pi[], int low[], int time)
{
    list<int>::iterator it;

    color[v] = 1;
    time = time + 1;
    d[v] = time;

    for(it = tab[v].begin(); it != tab[v].end(); it++)
    {
        if(color[*it] == 0)
        {
            pi[*it] = v;
            DFS_VISIT(*it, tab, n, color, d, f, pi, low, time);
        }
    }

    color[v] = 2;
    time = time + 1;
    f[v] = time;
    LOW(v, tab, n, color, d, f, pi, low, time);
}
void LOW(int v, list<int>tab[], int n, int color[], int d[], int f[], int pi[], int low[], int time)
{
    vector<int> V;
    vector<int> low2;
    vector<int> low3;
    vector<int> Parents;
    vector<int>::iterator it2;
    list<int>::iterator it;

    V.push_back(d[v]);

    for(it = tab[v].begin(); it != tab[v].end(); it++)
    {
        if(*it != pi[v])
            low3.push_back(d[*it]);
    }

    if(low3.size() != 0)
    {
        sort(low3.begin(), low3.end());
        V.push_back(*low3.begin());
    }

    for(int i = 1; i < n; i++)
    {
        if(pi[i] == v)
            Parents.push_back(i);
    }

    for(it2 = Parents.begin(); it2 != Parents.end(); it2++)
    {
        if(low[*it2] != 0)
        {
            low2.push_back(low[*it2]);
        }
    }

    if(low2.size() != 0)
    {
        sort(low2.begin(), low2.end());
        V.push_back(*low2.begin());
    }

    sort(V.begin(), V.end());
    low[v] = *V.begin();

    V.clear();
    low2.clear();
    low3.clear();
    Parents.clear();
}

bool IS_BRIDGE(list<int> tab[], int n, int licznik, int wsk)
{
    //tworzymy tablice do wyznaczenia mostów dla funkcji DFS() i LOW()

    int *color = new int[n];
    int *d = new int[n];
    int *f = new int[n];
    int *pi = new int[n];
    int *low = new int[n];
    int time = 0;

    //zerujemy tablice
    for(int i = 1; i < n; i++)
    {
        color[i] = 0;
        d[i] = 0;
        f[i] = 0;
        pi[i]= 0;
        low[i] = 0;
    }

    DFS(tab, n, color, d, f, pi, low, time);  //wyznaczamy LOW i mosty w grafie

    //tworzymy zmienne odpowiedzialne za sprawdzanie wierzchołków czy sš pierwszym i drugim wierzchołkiem mostu
    bool check_1 = false;
    bool check_2 = false;

    //vectory dla pierwszych i drugich wierzchołków mostu (jeli mamy most a->b, to bridge_first == a, a bridge_second == b)
    vector<int> bridge_first;
    vector<int> bridge_second;
    vector<int>::iterator it2;


    //wyznaczamy mosty dla danego przejcia
    for(int i = 2; i < n; i++)
    {
        if(low[i] == d[i])
        {
            if((pi[i] && i) > 0) // jeli low[i] == d[i] to mamy most pi[i]->i, i jeli te zmienne nie sš zerowe to dodajemy je  do vectorów
            {
                //zapisujemy wierzchołki mostów do vectorów bridge_first i bridge_second
                bridge_first.push_back(i);
                bridge_second.push_back(pi[i]);
            }
        }
    }

    for(it2 = bridge_first.begin(); it2 != bridge_first.end(); it2++)
    {
        if(*it2 == licznik) //jeli wierzchołek 1 == pierwszy wierzchołek mostu - to check_1 = true (pierwszy wierzchołek się zgadza)
        {
            check_1 = true;
            break;
        }
        else continue;
    }

    for(it2 = bridge_second.begin(); it2 != bridge_second.end(); it2++)
    {
        if(*it2 == wsk) //jeli wierzchołek 2 == drugi wierzchołek mostu - to check_2 = true (drugi wierzchołek się zgadza)
        {
            check_2 = true;
            break;
        }
        else continue;
    }

    if((check_1 == true) && (check_2 == true)) // jeli oba wierzchołki zgadzajš się z wierzchołkami mostu to krawęd od licznik->wsk jest mostem i return true
        return true;
    else return false; //a jeli wierzchołki się nie zgadzajš to return false

    //zwalniamy pamięć
    delete [] color;
    delete [] d;
    delete [] f;
    delete [] pi;
    delete [] low;
    delete [] tab;
}

//ROZWIĽZANIE Z KOMENTARZAMI
//Znajdywanie cyklu eulera w grafie nieskierowanym - Kacper Fi - UWAGA!, algorytm nie sprawdza, czy graf posiada cykl eulera - należy wprowadzać grafy eulerowskie
int main()
{
    int n, m, v1, v2;

    cin >> n >> m;

    n+=1;
    m+=1;

    list<int> *tab = new list<int>[n];

    for(int i = 1 ; i < m; i++)  //tworzymy graf
    {
        cin >> v1 >> v2;
        tab[v1].push_back(v2);
        tab[v2].push_back(v1);
    }


    //wyznaczanie wierzchołka od którego zaczynamy(który ma sšsiadów)
    int licznik = 1;
    bool confirm = false;

    while(confirm == false)
    {
        if(tab[licznik].size() != 0)
        {
            confirm = true;
            break;
        }
        else if(tab[licznik].size() == 0)
        {
            licznik++;
        }
    }
    //
    ////////////////////////////////////////////////////////////
    //INFORMACJE:
    //jeli przechodzimy z wierzchołka a do b, to licznik == a, a wsk == b
    //Vertices to lista na poszczególne wierzchołki cyklu
    ////////////////////////////////////////////////////////////
    int licznik_first = licznik; //wyznaczamy pierwszy wierzchołek cyklu, którego dodamy na końcu do listy wierzchołków cyklu, bo jak wiemy cykl eulera zaczyna się i kończy w tym samym wierzchołku
    list<int>::iterator it;
    list<int>::iterator j;
    list<int> Vertices;

    while(Vertices.size() != (m-1)) //dopuki wierzchołków cyklu jest mniej niż (m-1)
    {
        for(it = tab[licznik].begin(); it != tab[licznik].end(); it++) //przeglšdamy sšsiadów wierzchołka
        {
            if(IS_BRIDGE(tab, n, licznik, *it) == 0) // jeli krawęd licznik->*it (a->b) nie jest mostem to dodajemy wierzchołek licznik(a) do listy, i usuwamy krawęd licznik->*it(a->b),
            {                                        // i z wierzchołka a, przechodzimy do wierzchołka b, czyli licznik = *it (a == b)
                Vertices.push_front(licznik);
                tab[licznik].remove(*it);
                tab[*it].remove(licznik);
                licznik = *it;
                break;
            }
            else if((IS_BRIDGE(tab, n, licznik, *it) == 1) && (tab[licznik].size() == 1)) // w innym przypadku jeli krawęd licznik->*it jest mostem ale nie ma już innych krawędzi do
            {                                                                             // przejcia to i tak niš idziemy, wpisujšc licznik na listę i usuwajšc krawęd licznik->*it
                Vertices.push_front(licznik);
                tab[licznik].remove(*it);
                tab[*it].remove(licznik);
                licznik = *it;
                break;
            }
            else if((IS_BRIDGE(tab, n, licznik, *it) == 1) && (tab[licznik].size() > 1)) // a jeli krawęd licznik-> *wsk jest mostem ale możemy przejć do innego wierzchołka, do którego
            {                                                                            // krawęd nie jest mostem to pomijamy ten wierzchołek i pójdziemy do innego w następnym przejciu
                continue;
            }
        }
    }

    Vertices.push_front(licznik_first); // na końcu na sam poczštek dodajemy pierwszy wierzchołek cyklu, którego wyznaczylimy na poczštku

    /////////////////////////////////////////////////////////////////
    //wyswietlamy cykl eulera:
    cout << endl << "Eulerian Cycle: ";
    for(it = Vertices.begin(); it != Vertices.end(); it++)
    {
        cout << *it << " ";
    }

    return 0;
}





